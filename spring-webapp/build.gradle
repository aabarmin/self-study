buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:4.3.0'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'war'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    testCompile('org.junit.jupiter:junit-jupiter-api:5.3.1')
    testCompile('org.junit.jupiter:junit-jupiter-params:5.3.1')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.3.1')

    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}

test {
    useJUnitPlatform()
}

import com.bmuschko.gradle.docker.tasks.image.*

task copyWar(type: Copy) {
    dependsOn 'build'

    from 'build/libs/spring-webapp.war'
    into 'build/docker'
}

/**
 * This task creates a Dockerfile that contains Tomcat and war of our application.
 * Image is not published anywhere by default, it's necessary to publish it before run.
 */
task createDockerfile(type: Dockerfile) {
    dependsOn 'copyWar'

    from 'tomcat:8'
    exposePort 8080
    addFile('spring-webapp.war', '/usr/local/tomcat/webapps/app.war')
    defaultCommand('catalina.sh', 'run')
}

task removeImage(type: DockerRemoveImage) {
    targetImageId 'abarmin/webapp'
}

task buildImage(type: DockerBuildImage) {
    //dependsOn 'removeImage'
    dependsOn 'createDockerfile'

    tags.add('abarmin/webapp:latest')
}